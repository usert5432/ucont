#!/usr/bin/env bash

# shellcheck source=lib/ucont/defs
. "${LIBDIR}/ucont/defs"

COLOR_RESET=$'\e[0m'
# COLOR_BLUE=$'\e[1;34m'
COLOR_GREEN=$'\e[1;32m'
COLOR_RED=$'\e[1;31m'
COLOR_YELLOW=$'\e[1;33m'
# COLOR_WHITE=$'\e[0;37m'
COLOR_MAGENTA=$'\e[1;35m'

pprint ()
{
    local prefix="${1}"
    local color="${2}"
    shift 2

    echo "  [${color}${prefix}${COLOR_RESET}] ${*}"
}

die ()
{
    pprint ERROR "${COLOR_RED}" "${*}"
    exit 1
}

warn ()
{
    pprint WARN "${COLOR_YELLOW}" "${*}"
}

info ()
{
    pprint INFO "${COLOR_GREEN}" "${*}"
}

debug ()
{
    [ -z "${UCONT_DEBUG}" ] && return
    pprint DEBUG "${COLOR_MAGENTA}" "${*}"
}

verbose_exec ()
{
    debug "Running: '${*}'"
    "${@}"
}

exec_or_die ()
{
    verbose_exec "${@}" || die "Failed to execute '${*}'"
}

get_container_rootdir ()
{
    local name="${1}"
    echo "${CONTAINERS_ROOT}/${name}"
}

get_container_mountpoint ()
{
    local name="${1}"
    local mode="${2}"

    # shellcheck disable=SC2155
    local cont_root="$(get_container_rootdir "${name}")"

    case "${mode}" in
        "direct")
            echo "${cont_root}/${MOUNT_NAME_DIRECT}"
            return 0
            ;;
        "overlay")
            echo "${cont_root}/${MOUNT_NAME_OVERLAY}"
            return 0
            ;;
        *)
            return 1
    esac
}

get_temp_container_name ()
{
    local prefix="${1}"
    local path

    if ! path="$(mktemp -d -p "${CONTAINERS_ROOT}" "${prefix:-tmp}.XXXXXX")"
    then
        return 1
    fi

    echo "${path##*/}"
}

rm_container_dirs ()
{
    local name="${1}"
    # shellcheck disable=SC2155
    local cont_root="$(get_container_rootdir "${name}")"

    rmdir \
        "${cont_root}/${MOUNT_NAME_DIRECT}" \
        "${cont_root}/${MOUNT_NAME_OVERLAY_LOWER}" \
        "${cont_root}/${MOUNT_NAME_OVERLAY_UPPER}" \
        "${cont_root}/${MOUNT_NAME_OVERLAY_WORK}" \
        "${cont_root}/${MOUNT_NAME_OVERLAY}" \
        "${cont_root}"
}

verify_mode ()
{
    local mode="${1}"
    local MODES=( "direct" "overlay" )

    for m in "${MODES[@]}"
    do
        [[ "${mode}" == "${m}" ]] && return
    done

    die "Unknown mode: '${mode}'"
}

